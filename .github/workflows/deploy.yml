name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  prepare_deployment:
    name: Prepare for Deployment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run deployment check
        id: deployment_check
        run: node scripts/deploy.js
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Prepare for production
        if: success()
        run: node scripts/prepare-for-production.js --auto-confirm
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Build application
        if: success()
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Create deployment archive
        if: success()
        run: |
          tar -czf deployment.tar.gz .next public package.json package-lock.json next.config.js
      
      - name: Upload deployment artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1
          
      - name: Summary
        run: |
          echo "## Deployment Preparation Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.deployment_check.outcome }}" == "success" ]; then
            echo "✅ Deployment readiness check: Passed" >> $GITHUB_STEP_SUMMARY
            echo "✅ Production preparation: Completed" >> $GITHUB_STEP_SUMMARY
            echo "✅ Build process: Successful" >> $GITHUB_STEP_SUMMARY
            echo "✅ Deployment package: Created" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment readiness check: Failed" >> $GITHUB_STEP_SUMMARY
            echo "❌ Deployment aborted due to failed checks" >> $GITHUB_STEP_SUMMARY
          fi
  
  deploy_to_staging:
    name: Deploy to Staging
    needs: prepare_deployment
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.trainer-fitness-app.example.com
    if: github.event_name == 'push' || github.event.inputs.environment == 'staging'
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package
      
      - name: Extract deployment package
        run: mkdir -p deploy && tar -xzf deployment.tar.gz -C deploy
      
      - name: Deploy to staging (simulated)
        run: |
          echo "Deploying to Staging environment..."
          echo "Setting up environment variables for Staging..."
          echo "Running database migrations..."
          echo "Starting application server..."
          echo "Deployment to Staging completed successfully!"
      
      - name: Run post-deployment health check
        run: |
          echo "Running health checks on Staging environment..."
          echo "Health check passed!"
          
      - name: Summary
        run: |
          echo "## Staging Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment to Staging: Successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ Health Check: Passed" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Environment URL: https://staging.trainer-fitness-app.example.com" >> $GITHUB_STEP_SUMMARY
  
  deploy_to_production:
    name: Deploy to Production
    needs: [prepare_deployment, deploy_to_staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://trainer-fitness-app.example.com
    if: github.event.inputs.environment == 'production'
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package
      
      - name: Extract deployment package
        run: mkdir -p deploy && tar -xzf deployment.tar.gz -C deploy
      
      - name: Deploy to production (simulated)
        run: |
          echo "Deploying to Production environment..."
          echo "Setting up environment variables for Production..."
          echo "Running database migrations..."
          echo "Starting application server..."
          echo "Deployment to Production completed successfully!"
      
      - name: Run post-deployment health check
        run: |
          echo "Running health checks on Production environment..."
          echo "Health check passed!"
          
      - name: Summary
        run: |
          echo "## Production Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment to Production: Successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ Health Check: Passed" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Environment URL: https://trainer-fitness-app.example.com" >> $GITHUB_STEP_SUMMARY 