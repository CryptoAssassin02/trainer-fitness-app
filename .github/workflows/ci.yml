name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  basic_check:
    name: Basic Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for mock packages
        run: |
          if grep -q "file:./mocks/perplexity-ai" package.json; then
            echo "::warning::Mock perplexity-ai package detected. This will not work in production!"
          fi
      
      - name: Check file structure
        run: ls -la
        
      - name: Summary
        run: |
          echo "## Basic Check Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Dependency installation: Successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ File structure verification: Completed" >> $GITHUB_STEP_SUMMARY
          if grep -q "file:./mocks/perplexity-ai" package.json; then
            echo "⚠️ Mock package detected: Yes" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Mock package check: None found" >> $GITHUB_STEP_SUMMARY
          fi
  
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: basic_check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        id: lint
        run: npm run lint
        continue-on-error: true
      
      - name: Build
        id: build
        run: npm run build
        continue-on-error: true
      
      - name: Run tests
        id: test
        run: npm test
        continue-on-error: true
        env:
          # Set environment variables for testing
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Run tests with coverage
        id: coverage
        if: steps.test.outcome == 'success'
        run: npm run test:coverage
        env:
          # Set environment variables for testing
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: steps.coverage.outcome == 'success'
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
      
      - name: Check results
        run: |
          echo "## Build and Test Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.lint.outcome }}" == "success" ]; then
            echo "✅ Linting: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Linting: Failed" >> $GITHUB_STEP_SUMMARY
            exit_code=1
          fi
          
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "✅ Build: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build: Failed" >> $GITHUB_STEP_SUMMARY
            exit_code=1
          fi
          
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "✅ Tests: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests: Failed" >> $GITHUB_STEP_SUMMARY
            exit_code=1
          fi
          
          if [ "${{ steps.coverage.outcome }}" == "success" ]; then
            echo "✅ Code Coverage: Generated (see artifacts)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.coverage.outcome }}" == "skipped" ]; then
            echo "⚠️ Code Coverage: Skipped due to test failures" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Coverage: Failed to generate" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${exit_code}" == "1" ]; then
            exit 1
          fi
  
  deployment_check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for deployment readiness
        id: deploy_check
        run: node scripts/deploy.js
        continue-on-error: true
        env:
          # Set environment variables for testing
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Summary
        run: |
          echo "## Deployment Readiness Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.deploy_check.outcome }}" == "success" ]; then
            echo "✅ Deployment readiness check: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment readiness check: Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
  
  mock_check:
    name: Check for Mock Implementations
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check for mock implementations
        id: mock_check
        run: |
          if grep -q "file:./mocks/perplexity-ai" package.json; then
            echo "::error::Mock perplexity-ai package detected in package.json. This will not work in production!"
            echo "::error::Run './scripts/deploy.sh prepare' to replace the mock with the real package."
            exit 1
          else
            echo "No mock packages detected in package.json. Good to go!"
          fi
      
      - name: Summary
        if: always()
        run: |
          echo "## Mock Implementation Check Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.mock_check.outcome }}" == "success" ]; then
            echo "✅ No mock implementations found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Mock implementations detected" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi 